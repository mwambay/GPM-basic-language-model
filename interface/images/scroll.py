import json
def simulation():
                                            liste_provisoire = ['kinshasa', 'kigali']   
                                            context = ['anglais','je', 'suis', 'a'] 
                                            sequence_encode = [ [
  "francais",
  "2178405396",
  "parceque",
  "je",
  "suis",
  "a",
  "kinshasa",
  "une",
  "ville",
  "francaise",
  "parle"
 ],
 [
  "parceque",
  "7348269150",
  "je",
  "suis",
  "a",
  "kinshasa",
  "je",
  "ville",
  "francaise",
  "parle",
  "francais"
 ],
 [
  "je",
  "2613059478",
  "suis",
  "a",
  "kinshasa",
  "je",
  "parle",
  "ville",
  "francaise",
  "francais",
  "parceque"
 ],
 [
  "suis",
  "0987623451",
  "a",
  "kinshasa",
  "je",
  "parle",
  "anglais",
  "bonjour",
  "une",
  "intelligence",
  "artificielle",
  "un",
  "modele",
  "de",
  "language",
  "mathematique",
  "bas\u00e9",
  "francais",
  "parceque"
 ],
 [
  "a",
  "1627358940",
  "kinshasa",
  "je",
  "parle",
  "anglais",
  "parceque",
  "une",
  "un",
  "francais",
  "suis"
 ],
 [
  "kinshasa",
  "4539620178",
  "je",
  "parle",
  "anglais",
  "parceque",
  "je",
  "francais",
  "suis",
  "a"
 ],
 [
  "je",
  "2613059478",
  "parle",
  "anglais",
  "parceque",
  "je",
  "suis",
  "francais",
  "a",
  "kinshasa"
 ],
 [
  "parle",
  "6829371045",
  "anglais",
  "parceque",
  "je",
  "suis",
  "a",
  "est",
  "une",
  "ville",
  "francaise",
  "francais",
  "kinshasa"
 ],
 [
  "anglais",
  "8274136590",
  "parceque",
  "je",
  "suis",
  "a",
  "kigali",
  "kinshasa",
  "parle"
 ],
 [
  "parceque",
  "7348269150",
  "je",
  "suis",
  "a",
  "kigali",
  "a",
  "kinshasa",
  "parle",
  "anglais"
 ],
 [
  "je",
  "2613059478",
  "suis",
  "a",
  "kigali",
  "a",
  "boston",
  "ville",
  "francaise",
  "parle",
  "francais",
  "parceque",
  "kinshasa",
  "anglais"
 ],
 [
  "suis",
  "0987623451",
  "a",
  "kigali",
  "a",
  "boston",
  "on",
  "bonjour",
  "je",
  "une",
  "intelligence",
  "artificielle",
  "un",
  "modele",
  "de",
  "language",
  "mathematique",
  "bas\u00e9",
  "parle",
  "francais",
  "parceque",
  "kinshasa",
  "anglais"
 ],
 [
  "a",
  "1627358940",
  "kigali",
  "a",
  "boston",
  "on",
  "parle",
  "une",
  "un",
  "francais",
  "parceque",
  "je",
  "suis",
  "kinshasa",
  "anglais"
 ],
 [
  "kigali",
  "4053618279",
  "a",
  "boston",
  "on",
  "parle",
  "la",
  "anglais",
  "parceque",
  "je",
  "suis"
 ],
 [
  "a",
  "1627358940",
  "boston",
  "on",
  "parle",
  "la",
  "langue",
  "anglais",
  "parceque",
  "je",
  "suis",
  "kigali"
 ],
 [
  "boston",
  "0721693845",
  "on",
  "parle",
  "la",
  "langue",
  "anglaise",
  "je",
  "suis",
  "a",
  "kigali"
 ],
 [
  "on",
  "0276831945",
  "parle",
  "la",
  "langue",
  "anglaise",
  "a",
  "suis",
  "kigali",
  "boston"
 ],
 [
  "parle",
  "6829371045",
  "la",
  "langue",
  "anglaise",
  "a",
  "paris",
  "suis",
  "kigali",
  "boston",
  "on"
 ],
 [
  "la",
  "7301486592",
  "langue",
  "anglaise",
  "a",
  "paris",
  "on",
  "une",
  "kigali",
  "boston",
  "parle"
 ],
 [
  "langue",
  "8241370569",
  "anglaise",
  "a",
  "paris",
  "on",
  "parle",
  "boston",
  "la"
 ],
 [
  "anglaise",
  "5249083617",
  "a",
  "paris",
  "on",
  "parle",
  "la",
  "boston",
  "langue"
 ],
 [
  "a",
  "1627358940",
  "paris",
  "on",
  "parle",
  "la",
  "langue",
  "boston",
  "anglaise"
 ],
 [
  "paris",
  "2178305964",
  "on",
  "parle",
  "la",
  "langue",
  "francaise",
  "anglaise",
  "a"
 ],
 [
  "on",
  "0276831945",
  "parle",
  "la",
  "langue",
  "francaise",
  "john",
  "anglaise",
  "a",
  "paris"
 ],
 [
  "parle",
  "6829371045",
  "la",
  "langue",
  "francaise",
  "john",
  "est",
  "suis",
  "a",
  "kigali",
  "boston",
  "on",
  "anglaise",
  "paris"
 ],
 [
  "la",
  "7301486592",
  "langue",
  "francaise",
  "john",
  "est",
  "un",
  "une",
  "kigali",
  "a",
  "boston",
  "on",
  "parle",
  "anglaise",
  "paris"
 ],
 [
  "langue",
  "8241370569",
  "francaise",
  "john",
  "est",
  "un",
  "devellopeur",
  "a",
  "boston",
  "on",
  "parle",
  "la",
  "anglaise",
  "paris"
 ],
 [
  "francaise",
  "8147520936",
  "john",
  "est",
  "un",
  "devellopeur",
  "des",
  "paris",
  "on",
  "parle",
  "la",
  "langue"
 ],
 [
  "john",
  "7964125308",
  "est",
  "un",
  "devellopeur",
  "des",
  "logiciels",
  "on",
  "parle",
  "la",
  "langue",
  "francaise"
 ],
 [
  "est",
  "4308192576",
  "un",
  "devellopeur",
  "des",
  "logiciels",
  ".",
  "parle",
  "la",
  "langue",
  "francaise",
  "john"
 ],
 [
  "un",
  "5389062417",
  "devellopeur",
  "des",
  "logiciels",
  ".",
  "Tom",
  "dans",
  "son",
  "maladroit",
  "n'\u00e9tait",
  "pas",
  "Java",
  "est",
  "langage",
  "de",
  "programmation",
  "objet",
  "en",
  "il",
  "pour",
  "l'utilisateur",
  "(",
  "gr\u00e2ce",
  ")",
  "La",
  "gestion",
  "le",
  "plus",
  "que",
  "C",
  "qui",
  "comporte",
  "du",
  "c'est",
  "tr\u00e8s",
  "portable",
  "les",
  "une",
  "qu'il",
  "\u00ab",
  "faiblement",
  "typ\u00e9",
  "car",
  "caract\u00e8re",
  "bien",
  "repr\u00e9sent\u00e9",
  "inexact",
  "difficile",
  "\u00e0",
  "apprendre",
  "Le",
  "C++",
  "bas\u00e9",
  "sur",
  "Un",
  "r\u00e9seau",
  "local",
  "donc",
  "sous",
  "sa",
  "modes",
  "WAN",
  "la",
  "langue",
  "francaise",
  "john"
 ],
 [
  "devellopeur",
  "2678015493",
  "des",
  "logiciels",
  ".",
  "langue",
  "francaise",
  "john",
  "est",
  "un"
 ],
 [
  "des",
  "9438712056",
  "logiciels",
  ".",
  "francaise",
  "john",
  "est",
  "un",
  "devellopeur"
 ],
 [
  "logiciels",
  "7920148365",
  ".",
  "john",
  "est",
  "un",
  "devellopeur",
  "des"
 ],
 [
  ".",
  "8410572639",
  "<stop>"
 ],
 [
  "je",
  "2613059478",
  "suis",
  "un",
  "programmeur",
  "web",
  ".",
  "une",
  "intelligence",
  "artificielle",
  "modele",
  "de",
  "language",
  "dispose",
  "certains",
  "param\u00e8tres"
 ],
 [
  "suis",
  "0987623451",
  "un",
  "programmeur",
  "web",
  ".",
  "bonjour",
  "je",
  "une",
  "intelligence",
  "artificielle",
  "modele",
  "de",
  "language",
  "mathematique",
  "bas\u00e9",
  "parle",
  "francais",
  "parceque",
  "a",
  "kinshasa",
  "anglais",
  "kigali",
  "boston"
 ],
 [
  "un",
  "5389062417",
  "programmeur",
  "web",
  ".",
  "bonjour",
  "je",
  "suis",
  "modele",
  "de",
  "language",
  "mathematique",
  "bas\u00e9",
  "sur",
  "les",
  "a"
 ],
 [
  "programmeur",
  "1289476305",
  "web",
  ".",
  "le",
  "compilateur",
  "qu'il",
  "fait",
  "je",
  "suis",
  "un"
 ],
 [
  "web",
  "0456792138",
  ".",
  "je",
  "suis",
  "un",
  "programmeur"
 ],
 [
  ".",
  "8410572639",
  "<stop>"
 ],
 [
  "je",
  "2613059478",
  "suis",
  "un",
  "devellopeur",
  "web",
  ".",
  "une",
  "intelligence",
  "artificielle",
  "modele",
  "de",
  "language",
  "dispose",
  "certains",
  "param\u00e8tres",
  "programmeur"
 ],
 [
  "suis",
  "0987623451",
  "un",
  "devellopeur",
  "web",
  ".",
  "bonjour",
  "je",
  "une",
  "intelligence",
  "artificielle",
  "modele",
  "de",
  "language",
  "mathematique",
  "bas\u00e9",
  "parle",
  "francais",
  "parceque",
  "a",
  "kinshasa",
  "anglais",
  "kigali",
  "boston",
  "programmeur"
 ]]             
                                            liste_prob = {}
                                            vecteurs_integres = []
                                            if liste_provisoire.__len__() != 100:
                                                for word_context in context:
                                                    print(word_context)
                                                    for vector in sequence_encode:
                                                        if vector[0] == word_context:
                                                            print(vector)
                                                            vecteurs_integres.append(vector)
                                            top = len(context)
                                            top -= 1
                                            for vecteur in vecteurs_integres:
                                                for token in liste_provisoire:

                                                    if token in vecteur:
                                                        indice_token = vecteur.index(token)
                                                        if str(vecteur[indice_token-2]).isdigit():
                                                            if context[top] == vecteur[indice_token-1] and context[top-1] == vecteur[indice_token-3]:
                                                                        if token not in liste_prob:
                                                                            print(token)
                                                                            liste_prob[token] = 1
                                                                            vecteurs_integres.append(token)
                                                                            vecteurs_integres.append(word_context)
                                                                        else:
                                                                            indice = liste_prob[token]
                                                                            liste_prob[token] = int(indice) + 1

                                                        else:       
                                                            if context[top] == vecteur[indice_token-1] and context[top-1] == vecteur[indice_token-2]:
                                                                        if token not in liste_prob:
                                                                            print(token)
                                                                            liste_prob[token] = 1
                                                                            vecteurs_integres.append(token)
                                                                            vecteurs_integres.append(word_context)
                                                                            
                                                                            
                                                                        else:
                                                                            indice = liste_prob[token]
                                                                            liste_prob[token] = int(indice) + 1
                                                    
                                                                
                                                            

                                            with open('file.json', 'w') as file:
                                                    json.dump(liste_prob, file, indent=4)
                                                    file.close()
simulation()